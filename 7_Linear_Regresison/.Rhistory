getwd()
View(iris)
unique(iris$Species)
install.packages(c("GGally", "ggplot2"))
library(GGally)
ggpairs(iris, mapping=ggplot2::aes(colour = Species)
ggpairs(iris, mapping=ggplot2::aes(colour = Species))
library(GGally)
ggpairs(iris, mapping=ggplot2::aes(colour = Species))
# In a sample n=9 mean 1100, sd = 30. What is the 95 interval for mean
mean1<-1100
sd1<- 30
n1<-9
mean1 + c(-1,1)*qt(0.975, n1-1)*sd1/sqrt(9)
#Question 2 sample size 9. average Weight difference follow up-baseline = -2
#what would sd be for the upper end point of 95 interval to be 0
n2<-9
mean2<--2
sd2<- mean2*sqrt(n2)/qt(0.975, n2-1)
sd2
qt(0.975,8)
mean2<-(-2)
sd2<- mean2*sqrt(n2)/qt(0.975, n2-1)
sd2
# is 95% with 2.5% on both sides of the range
n_y <- 10 # nights new system
n_x <- 10 # nights old system
var_y <- 0.60 # variance new (sqrt of ??)
var_x <- 0.68 # variance old (sqrt of ??)
mean_y <- 3# average hours new system
mean_x <- 5# average hours old system
# calculate pooled standard deviation
mean_p <- sqrt(((n_x - 1) * var_x + (n_y - 1) * var_y)/(n_x + n_y - 2))
#plug in to main equation, df= n2+n1-2
confidenceInterval <- mean_y - mean_x + c(-1, 1) * qt(quantile, df=n_y+n_x-2) * mean_p * (1 / n_x + 1 / n_y)^.5
#plug in to main equation, df= n2+n1-2
confidenceInterval <- mean_y - mean_x + c(-1, 1) * qt(quantile, df=n_y+n_x-2) * mean_p * (1 / n_x + 1 / n_y)^.5
round(confidenceInterval,2)
#plug in to main equation, df= n2+n1-2
confidenceInterval <- mean_y - mean_x + c(-1, 1) * qt(quantile, df=n_y+n_x-2) * mean_p * (1 / n_x + 1 / n_y)^0.5
#plug in to main equation, df= n2+n1-2
confidenceInterval <- mean_y - mean_x + c(-1, 1) * qt(quantile, df=18) * mean_p * (1 / n_x + 1 / n_y)^0.5
#plug in to main equation, df= n2+n1-2
confidenceInterval <- mean_y - mean_x + c(-1, 1) * (qt(quantile, df=18)) * mean_p * (1 / n_x + 1 / n_y)^0.5
#plug in to main equation, df= n2+n1-2
confidenceInterval <- mean_y - mean_x + c(-1, 1) * (qt(0.975, df=18)) * mean_p * (1 / n_x + 1 / n_y)^0.5
n4t <- n4p <- 9
xt <- -3 ##treated
xp <- 1 ##placebo
st <- 1.5 ##treated
vart<- 1.5^2
sp<- 1.8 ##placebo
#Caclulate pooled variance
pool_variance<- sqrt(((n4p - 1) * varp + (n4t - 1) * vart)/(n4p+ n4t - 2))
varp <- 1.8^2
#Caclulate pooled variance
pool_variance<- sqrt(((n4p - 1) * varp + (n4t - 1) * vart)/(n4p+ n4t - 2))
#plug in the main equation. 90 interval 1-0.1/2 => 95 interval
confidenceInterval <- xt - xp + c(-1, 1) * qt(0.95, df=nt+np-2) *pool_variance * (1 / nt + 1 / np)^0.5
#plug in the main equation. 90 interval 1-0.1/2 => 95 interval
confidenceInterval <- xt - xp + c(-1, 1) * qt(0.95, df=n4t+n4p-2) *pool_variance * (1 / n4t + 1 / n4p)^0.5
#Caclulate pooled variance
pool_variance<- sqrt(((n4p - 1) * varp + (n4t - 1) * vart)/(n4p+ n4t - 2))
#plug in the main equation. 90 interval 1-0.1/2 => 95 interval
confidenceInterval <- xt - xp + c(-1, 1) * qt(0.95, df=n4t+n4p-2) *pool_variance * (1 / n4t + 1 / n4p)^0.5
confidenceInterval
#Question 1: baseline vs treatment mean. Ho: there is mean reduction between 2 treatments
#Two sided test p value, paired
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
subject<-c(1,2,3,4,5)
question1<-data.frame(subject, baseline, week2)
View(question1)
install.packages("UsingR")
library(UsingR)
t.test(question1$baseline - question1$week2,  paired = TRUE)
t.test(question1$baseline - question1$week2, alt ="two.sided"
paired = TRUE)
t.test(question1$baseline - question1$week2, alt ="two.sided", paired = TRUE)
t.test(x= question1$baseline, y=question1$week2, alt ="two.sided", paired = TRUE)
meanbrain<- 1100
sdbrain<-30
meanbrain+c(-1,1)*qt(0.975, 8)*sdbrain/sqrt(9)
# Question 3: total of 4 people. 3/4 chose coke over pepsi. Caclulate p value
#for Ho that people prefer coke over pepsi, one sided test
#since there is only two option cokr or pepsi -> pbinom
pbinom(3,4,0.5)
# Question 3: total of 4 people. 3/4 chose coke over pepsi. Caclulate p value
#for Ho that people prefer coke over pepsi, one sided test
#since there is only two option cokr or pepsi -> pbinom
pbinom(2,4,0.5)
# Question 3: total of 4 people. 3/4 chose coke over pepsi. Caclulate p value
#for Ho that people prefer coke over pepsi, one sided test >-2
#since there is only two option cokr or pepsi -> pbinom
pbinom(2,4,0.5, lower.tail = FALSE
)
#Question 4: Infection rate benchmark is 1/100.
#Recently the hospital saw 10/1787 ifection cases.What is the one sided p value
#whether or not the hospital below the benchmark
ppois(10, lamda = 1/100 * 1787)
#Question 4: Infection rate benchmark is 1/100.
#Recently the hospital saw 10/1787 ifection cases.What is the one sided p value
#whether or not the hospital below the benchmark
ppois(10, lambda = 1/100 * 1787)
#Question 5:  9 patients to diet pill and 9 to placebo.
# Diet pill group: mean -3, sd 1.5
#placebo group mean 1, sd= 1.8
#Does the mean seem to be different between 2 groups
# p value for two sided test
ntreat <- nplacebo <- 9
mean_treat <- -3 ##treated
mean_placebo <- 1 ##placebo
sdtreat <- 1.5 ##treated
vartreat<- 1.5^2
sdplacebo<- 1.8 ##placebo
varplacebo <- 1.8^2
#Find pooled variance
pool_variance<- sqrt(((nplacebo - 1) * varplacebo + (ntreat- 1) * vartreat)/(nplacebo+ ntreat - 2))
# Find p value for the two sided test
ts<- ((mean_placebo - mean_treat))/(ppool_variance*sqrt(1/ntreat+1/nplacebo))
# Find p value for the two sided test
ts<- ((mean_placebo - mean_treat))/(pool_variance*sqrt(1/ntreat+1/nplacebo))
# Find p value for the two sided test
ts<- ((mean_placebo - mean_treat))/(pool_variance*sqrt(1/ntreat+1/nplacebo))
pt(ts, df=9+9-2)
pt(ts, df=9+9-2)
# Find p value for the two sided test
ts<- ((mean_placebo - mean_treat))/(pool_variance*sqrt(1/ntreat+1/nplacebo))
pt(ts, df=9+9-2)
# Find p value for the two sided test
ts<- ((mean_treat- mean_placebo))/(pool_variance*sqrt(1/ntreat+1/nplacebo))
pt(ts, df=9+9-2)
# Find p value for the two sided test
ts<- ((mean_treat- mean_placebo))/(pool_variance*sqrt(1/ntreat+1/nplacebo))
pt(ts, df=9+9-2)
#Find pooled variance
pool_variance<- sqrt(((nplacebo - 1) * varplacebo + (ntreat- 1) * vartreat)/(nplacebo+ ntreat - 2))
# Find p value for the two sided test
ts<- ((mean_treat- mean_placebo))/(pool_variance*sqrt(1/ntreat+1/nplacebo))
# Find p value for the two sided test
ts<- ((mean_treat- mean_placebo))/(pool_variance*sqrt(1/ntreat+1/nplacebo)*0.5)
pt(ts, df=9+9-2)
# Find p value for the two sided test
ts<- ((mean_treat- mean_placebo))/(pool_variance*sqrt(1/ntreat+1/nplacebo)^0.5)
pt(ts, df=9+9-2)
power.t.test(100,delta = 0.01, sd= 0.04, type = "one.sample", alt="one.sided")$power
#So power is 0.9
power.t.test(power=0.9, delta=0.01, sd=0,04 , sig.level=0.05, type="one.sample", alt="one.sided")$n
#So power is 0.9
power.t.test(power = 0.9, delta = 0.01, sd= 0.04, type="one.sample", alt="one.sided")$n
rexp(n, 0.2)
n_simulation<- 1000
n<- 40
lambda<- 0.2
rexp(n, 0.2)
rexp(n*n_simulation, 0.2)
rep<-rexp(n*n_simulation, 0.2)
data<- data.frame(rep, n_simulation, n)
View(data)
data<- matrix(rep, n_simulation, n)
data<- matrix(rep, n_simulation, n)
sim_mean<-rowMeans(data)
plot(sim_mean)
hist(sim_mean)
a<- hist(sim_mean)
a
a<- hist(sim_mean, col = "blue")
a
View(a)
library(ggplot2)
a<- hist(sim_mean, col = "blue")
library(knitr)
library(knitr)
a<- hist(sim_mean, col = "blue", xlab = "Means", ylab = "Frequency")
a
sim_mean<-rowMeans(data)
a<- hist(sim_mean, col = "blue", xlab = "Means", ylab = "Frequency")
a
hist(sim_mean, col = "blue", xlab = "Means", ylab = "Frequency")
theoretical_mean>-1/lambda
theoretical_mean<-1/lambda
sample_mean<- mean(sim_mean)
data.frame(theoretical_mean, sample_mean)
sim_mean<-rowMeans(data)
hist(sim_mean, col = "blue", xlab = "Means", ylab = "Frequency")
sample_var<- var(sim_mean)
theoretical_var<- (1/lambda)^2/n
data.frame(theoretical_var,sample_var)
abline(v=sample_mean, a = theoretical_mean)
hist(sim_mean, col = "blue", xlab = "Means", ylab = "Frequency")
abline(v=sample_mean, a = theoretical_mean)
```{r, echo=TRUE, cache=TRUE}
sim_mean<-rowMeans(data)
hist(sim_mean, col = "blue", xlab = "Means", ylab = "Frequency")
abline(v=sample_mean, a = theoretical_mean)
abline(a=sample_mean, b = theoretical_mean)
plot(sim_mean, col = "blue", xlab = "Means", ylab = "Frequency")
abline(a=sample_mean, b = theoretical_mean)
library(ggplot2)
hist(sim_mean, col = "blue", xlab = "Means", ylab = "Frequency")
abline(v=sample_mean, lwd=2)
abline(v=theoretical_mean, lwd=2)
ggplot(data=sim_mean, aes(sim_mean),
geom_bar(stat="identity"),
xlab("Sample mean")
)
sim_meanframe<- as.data.frame(sim_mean)
ggplot(data=sim_mean, aes(sim_mean),
geom_bar(stat="identity"),
xlab("Sample mean")
)
ggplot(data=sim_meanframe, aes(sim_mean),
geom_bar(stat="identity"),
xlab("Sample mean")
)
ggplot(data=sim_meanframe, aes(sim_mean),
geom_bar(stat="identity"),
xlab("Sample mean")
)
View(sim_meanframe)
ggplot(data=sim_meanframe, aes(sim_meanframe$sim_mean),
geom_bar(stat="identity"),
xlab("Sample mean")
)
ggplot(data=sim_meanframe, aes(sim_mean),
geom_bar(stat="identity"),
xlab("Sample mean")
)
ggplot(data=sim_meanframe, aes(sim_mean),
geom_histogtam(position="identity"),
xlab("Sample mean")
)
hist(sim_mean, col = "blue", xlab = "Means", ylab = "Frequency")
ggplot(data=sim_meanframe, aes(x= sim_mean),
geom_histogtam(position="identity"),
xlab("Sample mean")
)
ggplot(data=sim_meanframe, aes(x= sim_mean)+
geom_histogtam(position="identity")+
xlab("Sample mean")
)
ggplot(data=sim_meanframe, aes(x= sim_mean))+
geom_histogtam(position="identity")+
xlab("Sample mean")
ggplot(data=sim_meanframe, aes(x= sim_mean))+
geom_histogram(position="identity")+
xlab("Sample mean")
ggplot(data=sim_meanframe, aes(x= sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")
ggplot(data=sim_meanframe, aes(x= sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean") + geom_vline(xintercept = sample_mean)+
geom_vline(xintercept = theoretical_mean)
ggplot(data=sim_meanframe, aes(x= sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean") + geom_vline(xintercept = sample_mean, colour="blue")+
geom_vline(xintercept = theoretical_mean, colour="red")
sim_mean<-rowMeans(data)
sample_mean<- mean(sim_mean)
sim_mean<-rowMeans(data)
sample_mean<- mean(sim_mean)
data.frame(theoretical_mean, sample_mean)
ggplot(data=sim_meanframe, aes(x= sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")+
geom_density(data= sim_meanframe, position ="identity", colour="blue")
ggplot(data=sim_meanframe, aes(x= sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")+
geom_density(colour="blue")
ggplot(data=sim_meanframe, aes(x= sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")+
geom_density(colour="red", size=1)+
ggplot(data=sim_meanframe, aes(x= sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")+
geom_density(colour="red", size=1)
ggplot(data=sim_meanframe, aes(x= sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")+
geom_density(colour="red", size=1)
ggplot(data=sim_meanframe, aes(x=sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")+
geom_density(colour="red", size=1)
ggplot(data=sim_meanframe, aes(x=sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")+
ggtitle("Sample mean distribution with density curve")
ggplot(data=sim_meanframe, aes(x=sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")+
ggtitle("Sample mean distribution with density curve")+
geom_density(colour="red", size=1)
ggplot(data=sim_meanframe, aes(x=sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")+
ggtitle("Sample mean distribution with density curve")+
geom_density(colour="red", size=1)
ggplot(data=sim_meanframe, aes(x=sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")+
ggtitle("Sample mean distribution with density curve")+
geom_density()
a<- ggplot(data=sim_meanframe, aes(x=sim_mean))+
geom_histogram(position="identity", colour="black")+
xlab("Sample mean")+
ggtitle("Sample mean distribution with density curve")
a+ geom_density()
a<- ggplot(data=sim_meanframe, aes(x=sim_mean))+
geom_histogram(aes(y = after_stat(density)), position="identity", colour="black")+
xlab("Sample mean")+
ggtitle("Sample mean distribution with density curve")
a+ geom_density()
a+ geom_density(colour="blue", size=2)
ggplot(data=sim_meanframe, aes(x=sim_mean))+
geom_histogram(aes(y = after_stat(density)), position="identity", colour="black")+
xlab("Sample mean")+
ggtitle("Sample mean distribution with density curve")+
geom_density(colour="blue", size=2)
actual_conf_interval <- round (mean(sim_mean) + c(-1,1)*1.96*sd(sim_mean)/sqrt(n),3)
theory_conf_interval <- theoretical_mean+ c(-1,1)*1.96*sqrt(theoretical_var)/sqrt(n)
sample_conf_interval <- round (mean(sim_mean) + c(-1,1)*1.96*sd(sim_mean)/sqrt(n),3)
theoretical_conf_interval <- theoretical_mean+ c(-1,1)*1.96*sqrt(theoretical_var)/sqrt(n)
qqline(sim_mean, col = "steelblue", lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE)
qqline(sim_mean, col = "steelblue", lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE)
qqline(sim_mean, col = "steelblue", lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE)+
qqline(sim_mean, col = "steelblue", lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE)+
qqline(sim_mean, col = "blue", lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE)+
qqline(sim_mean, colour = "blue", lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE)+
qqline(sim_mean, lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE)+
qqline(sim_mean, lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE)
a<-qqnorm(sim_mean, pch = 1, frame = FALSE)
a+ qqline(sim_mean, lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE, type = "n")
qqline(sim_mean, lwd = 2)
qqline(sim_mean, lwd = 2)}
qqnorm(sim_mean, pch = 1, frame = FALSE)
qqline(sim_mean, lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE)
qqline(sim_mean, lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE)
qqline(sim_mean,colour ="blue",lwd = 2)
```{r, echo=TRUE}
qqline(sim_mean,col ="2",lwd = 2)
qqnorm(sim_mean, pch = 1, frame = FALSE)
qqline(sim_mean,col ="2",lwd = 2)
data(ToothGrowth)
str(ToothGrowth)
View(ToothGrowth)
head(ToothGrowth)
data<-data(ToothGrowth)
head(data)
```{r, echo=TRUE}
str(ToothGrowth)
summary(ToothGrowth)
summary(ToothGrowth)
ggplot(data=ToothGrowth, aes(x=ToothGrowth$dose, y=ToothGrowth$len)+
facet.grid(.~ToothGrowth$supp)+
geom_boxplot()+
xlab("Dose ")+ ylab("Tooth Length")+
ggtitle("Tooth Length by Dosage for Every Supplement")
)
ggplot(data=ToothGrowth, aes(x=ToothGrowth$dose, y=ToothGrowth$len)+
facet_grid(.~ToothGrowth$supp)+
geom_boxplot()+
xlab("Dose ")+ ylab("Tooth Length")+
ggtitle("Tooth Length by Dosage for Every Supplement")
)
ggplot(data=ToothGrowth, aes(x=dose, y=ToothGrowth$len)+
facet_grid(.~ToothGrowth$supp)+
geom_boxplot()+
xlab("Dose ")+ ylab("Tooth Length")+
ggtitle("Tooth Length by Dosage for Every Supplement")
)
ggplot(data=ToothGrowth, aes(x=factor(dose), y=ToothGrowth$len)+
facet_grid(.~ToothGrowth$supp)+
geom_boxplot()+
xlab("Dose ")+ ylab("Tooth Length")+
ggtitle("Tooth Length by Dosage for Every Supplement")
)
ggplot(data=ToothGrowth, aes(x=dose, y=len)+
facet_grid(.~ToothGrowth$supp)+
geom_boxplot()+
xlab("Dose ")+ ylab("Tooth Length")+
ggtitle("Tooth Length by Dosage for Every Supplement")
)
ggplot(data=ToothGrowth, aes(x=factor(dose), y=len)+
facet_grid(.~ToothGrowth$supp)+
geom_boxplot()+
xlab("Dose ")+ ylab("Tooth Length")+
ggtitle("Tooth Length by Dosage for Every Supplement")
)
ggplot(data=ToothGrowth, aes(x=dose, y=len))+
facet_grid(.~ToothGrowth$supp)+
geom_boxplot()+
xlab("Dose ")+ ylab("Tooth Length")+
ggtitle("Tooth Length by Dosage for Every Supplement")
ggplot(data=ToothGrowth, aes(x=factor(dose), y=len))+
facet_grid(.~ToothGrowth$supp)+
geom_boxplot()+
xlab("Dose ")+ ylab("Tooth Length")+
ggtitle("Tooth Length by Dosage for Every Supplement")
ggplot(data=ToothGrowth, aes(x=factor(dose), y=len, colour=factor(dose)))+
facet_grid(.~ToothGrowth$supp)+
geom_boxplot()+
xlab("Dose ")+ ylab("Tooth Length")+
ggtitle("Tooth Length by Dosage for Every Supplement")
tapply(ToothGrowth$len, ToothGrowth$supp, mean)
orangejuice<- subset(ToothGrowth
$len, ToothGrowth$supp == "OJ")
aacid<- subset(ToothGrowth$len, ToothGrowth$supp =="VC")
aacid<- subset(ToothGrowth$len, ToothGrowth$supp =="VC")
t.test(orangejuice, aacid, paired = FALSE, alternative = "two.sided"
)
t.test(orangejuice, aacid, paired = FALSE, alternative = "one.sided",  var.equal = FALSE
)
t.test(orangejuice, aacid, paired = FALSE, alternative = "greater",  var.equal = FALSE
)
t.test(orangejuice~ aacid, paired = FALSE, alternative = "greater",  var.equal = FALSE
)
t.test(orangejuice~ aacid, paired = FALSE, alternative = "greater"
)
t.test(orangejuice~ aacid, alternative = "greater"
)
t.test(orangejuice, aacid, paired = FALSE, alternative = "greater",  var.equal = FALSE
)
dose0.5<- subset(ToothGrowth$len, ToothGrowth$dose == "0.5")
dose1<- subset(ToothGrowth$len, ToothGrowth$dose == "1")
dose2<- subset(ToothGrowth$len, ToothGrowth$dose == "2")
t.test(dose0.5, dose1,paired = FALSE, alternative = "greater",  var.equal = FALSE )
t.test(dose0.5, dose1,paired = FALSE, alternative = "less",  var.equal = FALSE )
t.test(dose1, dose2,paired = FALSE, alternative = "less",  var.equal = FALSE )
t.test(dose0.5, dose2,paired = FALSE, alternative = "less",  var.equal = FALSE )
t.test(orangejuice, aacid )
install.packages("tinytex")
install.packages("tinytex")
library(tinytex)
# Conclusion
We concluded that there is  no significant correlation in taking orange juice or ascorbic acid in regard to tooth lengths. We analyzed the correlation between 0.5 and 1 mg/day, 0.5 and 2mg/day, and 1mg and 2mg/day. There are  strong correlation between 3 different dosages and the tooth length to one another.
install.packages("stringi")
install.packages("stringi", type=source)
install.packages("stringi", type = "source")
#Question 1: what is mu value to minimize the fucntion
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <- sum(x*w)/ sum(w)
setwd("~/Coursera/JH/John-Hopkins-DS2/7_Linear_Regresison")
#Question 2: Fit the regression through the origin and get the slope treating y
# as the outcome and x as the regressor
x2 <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y2 <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y2 ~ x2))
coef(lm(y2 ~ x2)
)
coef(lm(y2 ~ x2 - 1))
#Question 3:
data("mtcars")
force(mtcars)
View(mtcars)
lm(wt ~ mpg)
lm(mtcars$wt ~ mtcars$mpg)
coef(lm(mtcars$wt ~ mtcars$mpg))
lm(mtcars$wt ~ mtcars$mpg)
lm(mtcars$wt ~ mtcars$mpg, data=mtcars)
summary(lm(mtcars$wt ~ mtcars$mpg, data=mtcars))
summary(lm(mtcars$mg ~ mtcars$wt, data=mtcars))
summary(lm(mtcars$mpg ~ mtcars$wt, data=mtcars))
lm(mtcars$mpg ~ mtcars$wt, data=mtcars)
testscore2Bo<- 0+0.4*1.5
# first normalize
((x-mean(x))/sd(X))
# first normalize
((x-mean(x))/sd(x))
#Question 6: day care data.
#Consider the data given by the following
#What is the value of the first measurement if x were normalized
x6 <- c(8.58, 10.46, 9.01, 9.64, 8.86)
# first normalize
((x6-mean(x6))/sd(x6))
#Question 7:  x as the predictor and y as the outcome?
x7 <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y7 <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x7~y7)
coef(lm(x7~y7))
coef(lm(y7~x7))
x9 <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
